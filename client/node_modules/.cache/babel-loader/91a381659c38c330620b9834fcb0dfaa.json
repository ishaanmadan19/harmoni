{"ast":null,"code":"import _objectSpread from \"/Users/ryanmchenry/Documents/Northwestern/win2019/352/harmoni/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"/Users/ryanmchenry/Documents/Northwestern/win2019/352/harmoni/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/ryanmchenry/Documents/Northwestern/win2019/352/harmoni/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/ryanmchenry/Documents/Northwestern/win2019/352/harmoni/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ryanmchenry/Documents/Northwestern/win2019/352/harmoni/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/ryanmchenry/Documents/Northwestern/win2019/352/harmoni/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/ryanmchenry/Documents/Northwestern/win2019/352/harmoni/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/ryanmchenry/Documents/Northwestern/win2019/352/harmoni/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/ryanmchenry/Documents/Northwestern/win2019/352/harmoni/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/ryanmchenry/Documents/Northwestern/win2019/352/harmoni/client/src/upload/Upload.js\";\nimport React, { Component } from \"react\";\nimport Dropzone from \"../dropzone/Dropzone\";\nimport \"./Upload.css\";\nimport Progress from \"../progress/Progress\";\n\nvar Upload =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Upload, _Component);\n\n  function Upload(props) {\n    var _this;\n\n    _classCallCheck(this, Upload);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Upload).call(this, props));\n    _this.state = {\n      files: [],\n      uploading: false,\n      uploadProgress: {},\n      successfullUploaded: false\n    };\n    _this.onFilesAdded = _this.onFilesAdded.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.uploadFiles = _this.uploadFiles.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.sendRequest = _this.sendRequest.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.renderActions = _this.renderActions.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Upload, [{\n    key: \"onFilesAdded\",\n    value: function onFilesAdded(files) {\n      this.setState(function (prevState) {\n        return {\n          files: prevState.files.concat(files)\n        };\n      });\n    }\n  }, {\n    key: \"uploadFiles\",\n    value: function () {\n      var _uploadFiles = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        var promises;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.setState({\n                  uploadProgress: {},\n                  uploading: true\n                });\n                promises = [];\n                this.state.files.forEach(function (file) {\n                  promises.push(_this2.sendRequest(file));\n                });\n                _context.prev = 3;\n                _context.next = 6;\n                return Promise.all(promises);\n\n              case 6:\n                this.setState({\n                  successfullUploaded: true,\n                  uploading: false\n                });\n                window.setTimeout(function () {\n                  _this2.props.closeUpload();\n                }, 2000);\n                _context.next = 13;\n                break;\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](3);\n                // Not Production ready! Do some error handling here instead...\n                this.setState({\n                  successfullUploaded: true,\n                  uploading: false\n                });\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[3, 10]]);\n      }));\n\n      function uploadFiles() {\n        return _uploadFiles.apply(this, arguments);\n      }\n\n      return uploadFiles;\n    }()\n  }, {\n    key: \"sendRequest\",\n    value: function sendRequest(file) {\n      var _this3 = this;\n\n      return new Promise(\n      /*#__PURE__*/\n      function () {\n        var _ref = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee2(resolve, reject) {\n          var req, formData;\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  req = new XMLHttpRequest();\n                  req.upload.addEventListener(\"progress\", function (event) {\n                    if (event.lengthComputable) {\n                      var copy = _objectSpread({}, _this3.state.uploadProgress);\n\n                      copy[file.name] = {\n                        state: \"pending\",\n                        percentage: event.loaded / event.total * 100\n                      };\n\n                      _this3.setState({\n                        uploadProgress: copy\n                      });\n                    }\n                  });\n                  req.upload.addEventListener(\"load\", function (event) {\n                    var copy = _objectSpread({}, _this3.state.uploadProgress);\n\n                    copy[file.name] = {\n                      state: \"done\",\n                      percentage: 100\n                    };\n\n                    _this3.setState({\n                      uploadProgress: copy\n                    });\n\n                    resolve(req.response);\n                  });\n                  req.upload.addEventListener(\"error\", function (event) {\n                    var copy = _objectSpread({}, _this3.state.uploadProgress);\n\n                    copy[file.name] = {\n                      state: \"error\",\n                      percentage: 0\n                    };\n\n                    _this3.setState({\n                      uploadProgress: copy\n                    });\n\n                    reject(req.response);\n                  });\n                  formData = new FormData();\n                  formData.append(\"file\", file, file.name);\n                  req.open(\"POST\", \"http://localhost:8000/upload\");\n                  req.send(formData);\n                  window.setTimeout(function () {\n                    console.log(req.response);\n                  }, 2000);\n\n                case 9:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n\n        return function (_x, _x2) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    }\n  }, {\n    key: \"renderProgress\",\n    value: function renderProgress(file) {\n      var uploadProgress = this.state.uploadProgress[file.name];\n\n      if (this.state.uploading || this.state.successfullUploaded) {\n        return React.createElement(\"div\", {\n          className: \"ProgressWrapper\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88\n          },\n          __self: this\n        }, React.createElement(Progress, {\n          progress: uploadProgress ? uploadProgress.percentage : 0,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89\n          },\n          __self: this\n        }), React.createElement(\"img\", {\n          className: \"CheckIcon\",\n          alt: \"done\",\n          src: \"baseline-check_circle_outline-24px.svg\",\n          style: {\n            opacity: uploadProgress && uploadProgress.state === \"done\" ? 0.5 : 0\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90\n          },\n          __self: this\n        }));\n      }\n    }\n  }, {\n    key: \"renderActions\",\n    value: function renderActions() {\n      var _this4 = this;\n\n      if (this.state.successfullUploaded) {\n        return React.createElement(\"button\", {\n          onClick: function onClick() {\n            return _this4.setState({\n              files: [],\n              successfullUploaded: false\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107\n          },\n          __self: this\n        }, \"Clear\");\n      } else {\n        return React.createElement(\"button\", {\n          disabled: this.state.files.length < 0 || this.state.uploading,\n          onClick: this.uploadFiles,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117\n          },\n          __self: this\n        }, \"Upload\");\n      }\n    }\n  }, {\n    key: \"renderPiano\",\n    value: function renderPiano() {\n      return React.createElement(\"div\", {\n        className: \"pianoContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"whiteKey\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, \"C\"), React.createElement(\"div\", {\n        className: \"whiteKey\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, \"D\"), React.createElement(\"div\", {\n        className: \"whiteKey\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, \"E\"), React.createElement(\"div\", {\n        className: \"whiteKey\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, \"F\"), React.createElement(\"div\", {\n        className: \"whiteKey\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, \"G\"), React.createElement(\"div\", {\n        className: \"whiteKey\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, \"A\"), React.createElement(\"div\", {\n        className: \"whiteKey\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, \"B\"), React.createElement(\"div\", {\n        className: \"blackKey\",\n        id: \"Db\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, \"Db\"), React.createElement(\"div\", {\n        className: \"blackKey\",\n        id: \"Eb\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, \"Eb\"), React.createElement(\"div\", {\n        className: \"blackKey\",\n        id: \"Gb\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, \"Gb\"), React.createElement(\"div\", {\n        className: \"blackKey\",\n        id: \"Ab\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, \"Ab\"), React.createElement(\"div\", {\n        className: \"blackKey\",\n        id: \"Bb\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, \"Bb\"));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n\n      return React.createElement(\"div\", {\n        className: \"Upload\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"closeButton\",\n        onClick: function onClick() {\n          return _this5.props.closeUpload(true);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, \"X\"), React.createElement(\"span\", {\n        className: \"Title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, \"Upload Files\"), React.createElement(\"div\", {\n        className: \"Content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, React.createElement(Dropzone, {\n        onFilesAdded: this.onFilesAdded,\n        disabled: this.state.uploading || this.state.successfullUploaded,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"Files\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, this.state.files.map(function (file) {\n        return React.createElement(\"div\", {\n          key: file.name,\n          className: \"Row\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 162\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          className: \"Filename\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 163\n          },\n          __self: this\n        }, file.name), _this5.renderProgress(file));\n      }), this.renderPiano())), React.createElement(\"div\", {\n        className: \"Actions\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, this.renderActions()));\n    }\n  }]);\n\n  return Upload;\n}(Component);\n\nexport default Upload;","map":{"version":3,"sources":["/Users/ryanmchenry/Documents/Northwestern/win2019/352/harmoni/client/src/upload/Upload.js"],"names":["React","Component","Dropzone","Progress","Upload","props","state","files","uploading","uploadProgress","successfullUploaded","onFilesAdded","bind","uploadFiles","sendRequest","renderActions","setState","prevState","concat","promises","forEach","file","push","Promise","all","window","setTimeout","closeUpload","resolve","reject","req","XMLHttpRequest","upload","addEventListener","event","lengthComputable","copy","name","percentage","loaded","total","response","formData","FormData","append","open","send","console","log","opacity","length","map","renderProgress","renderPiano"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Dropzone from \"../dropzone/Dropzone\";\r\nimport \"./Upload.css\";\r\nimport Progress from \"../progress/Progress\";\r\n\r\nclass Upload extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      files: [],\r\n      uploading: false,\r\n      uploadProgress: {},\r\n      successfullUploaded: false\r\n    };\r\n\r\n    this.onFilesAdded = this.onFilesAdded.bind(this);\r\n    this.uploadFiles = this.uploadFiles.bind(this);\r\n    this.sendRequest = this.sendRequest.bind(this);\r\n    this.renderActions = this.renderActions.bind(this);\r\n  }\r\n\r\n  onFilesAdded(files) {\r\n    this.setState(prevState => ({\r\n      files: prevState.files.concat(files)\r\n    }));\r\n  }\r\n\r\n  async uploadFiles() {\r\n    this.setState({ uploadProgress: {}, uploading: true });\r\n    const promises = [];\r\n    this.state.files.forEach(file => {\r\n      promises.push(this.sendRequest(file));\r\n    });\r\n    try {\r\n      await Promise.all(promises);\r\n\r\n      this.setState({ successfullUploaded: true, uploading: false });\r\n      window.setTimeout(()=>{this.props.closeUpload()},2000)\r\n    } catch (e) {\r\n      // Not Production ready! Do some error handling here instead...\r\n      this.setState({ successfullUploaded: true, uploading: false });\r\n    }\r\n  }\r\n\r\n  sendRequest(file) {\r\n    return new Promise(async (resolve, reject) => {\r\n      const req = new XMLHttpRequest();\r\n\r\n      req.upload.addEventListener(\"progress\", event => {\r\n        if (event.lengthComputable) {\r\n          const copy = { ...this.state.uploadProgress };\r\n          copy[file.name] = {\r\n            state: \"pending\",\r\n            percentage: (event.loaded / event.total) * 100\r\n          };\r\n          this.setState({ uploadProgress: copy });\r\n        }\r\n      });\r\n\r\n      req.upload.addEventListener(\"load\", event => {\r\n        const copy = { ...this.state.uploadProgress };\r\n        copy[file.name] = { state: \"done\", percentage: 100 };\r\n        this.setState({ uploadProgress: copy });\r\n        resolve(req.response);\r\n      });\r\n\r\n      req.upload.addEventListener(\"error\", event => {\r\n        const copy = { ...this.state.uploadProgress };\r\n        copy[file.name] = { state: \"error\", percentage: 0 };\r\n        this.setState({ uploadProgress: copy });\r\n        reject(req.response);\r\n      });\r\n\r\n      const formData = new FormData();\r\n      formData.append(\"file\", file, file.name);\r\n\r\n      req.open(\"POST\", \"http://localhost:8000/upload\");\r\n      req.send(formData);\r\n      window.setTimeout(()=>{console.log(req.response)},2000)\r\n\r\n    });\r\n  }\r\n\r\n  renderProgress(file) {\r\n    const uploadProgress = this.state.uploadProgress[file.name];\r\n    if (this.state.uploading || this.state.successfullUploaded) {\r\n      return (\r\n        <div className=\"ProgressWrapper\">\r\n          <Progress progress={uploadProgress ? uploadProgress.percentage : 0} />\r\n          <img\r\n            className=\"CheckIcon\"\r\n            alt=\"done\"\r\n            src=\"baseline-check_circle_outline-24px.svg\"\r\n            style={{\r\n              opacity:\r\n                uploadProgress && uploadProgress.state === \"done\" ? 0.5 : 0\r\n            }}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  renderActions() {\r\n    if (this.state.successfullUploaded) {\r\n      return (\r\n        <button\r\n          onClick={() =>\r\n            this.setState({ files: [], successfullUploaded: false })\r\n          }\r\n        >\r\n          Clear\r\n        </button>\r\n      );\r\n    } else {\r\n      return (\r\n        <button\r\n          disabled={this.state.files.length < 0 || this.state.uploading}\r\n          onClick={this.uploadFiles}\r\n        >\r\n          Upload\r\n        </button>\r\n      );\r\n    }\r\n  }\r\n\r\n  renderPiano(){\r\n    return(\r\n      <div className='pianoContainer'>\r\n        <div className='whiteKey'>C</div>\r\n        <div className='whiteKey'>D</div>\r\n        <div className='whiteKey'>E</div>\r\n        <div className='whiteKey'>F</div>\r\n        <div className='whiteKey'>G</div>\r\n        <div className='whiteKey'>A</div>\r\n        <div className='whiteKey'>B</div>\r\n\r\n        <div className='blackKey' id='Db'>Db</div>\r\n        <div className='blackKey' id='Eb'>Eb</div>\r\n        <div className='blackKey' id='Gb'>Gb</div>\r\n        <div className='blackKey' id='Ab'>Ab</div>\r\n        <div className='blackKey' id='Bb'>Bb</div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Upload\">\r\n        <div className='closeButton' onClick={()=>this.props.closeUpload(true)}>X</div>\r\n        <span className=\"Title\">Upload Files</span>\r\n        <div className=\"Content\">\r\n          <div>\r\n            <Dropzone\r\n              onFilesAdded={this.onFilesAdded}\r\n              disabled={this.state.uploading || this.state.successfullUploaded}\r\n            />\r\n          </div>\r\n          <div className=\"Files\">\r\n            {this.state.files.map(file => {\r\n              return (\r\n                <div key={file.name} className=\"Row\">\r\n                  <span className=\"Filename\">{file.name}</span>\r\n                  {this.renderProgress(file)}\r\n                </div>\r\n              );\r\n            })}\r\n\r\n            {this.renderPiano()}\r\n          </div>\r\n        </div>\r\n        <div className=\"Actions\">{this.renderActions()}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Upload;\r\n"]},"metadata":{},"sourceType":"module"}