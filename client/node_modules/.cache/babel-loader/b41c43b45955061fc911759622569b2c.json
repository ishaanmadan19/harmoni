{"ast":null,"code":"import _objectSpread from \"/Users/ryanmchenry/Documents/Northwestern/win2019/352/harmoni/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"/Users/ryanmchenry/Documents/Northwestern/win2019/352/harmoni/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/ryanmchenry/Documents/Northwestern/win2019/352/harmoni/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/ryanmchenry/Documents/Northwestern/win2019/352/harmoni/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ryanmchenry/Documents/Northwestern/win2019/352/harmoni/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/ryanmchenry/Documents/Northwestern/win2019/352/harmoni/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/ryanmchenry/Documents/Northwestern/win2019/352/harmoni/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/ryanmchenry/Documents/Northwestern/win2019/352/harmoni/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/ryanmchenry/Documents/Northwestern/win2019/352/harmoni/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/ryanmchenry/Documents/Northwestern/win2019/352/harmoni/client/src/Upload.js\";\nimport React, { Component } from \"react\";\nimport \"./Upload.css\";\nimport Progress from './Progress';\nimport Dropzone from \"./Dropzone\";\n\nvar Upload =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Upload, _Component);\n\n  function Upload(props) {\n    var _this;\n\n    _classCallCheck(this, Upload);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Upload).call(this, props));\n    _this.state = {\n      files: [],\n      uploading: false,\n      uploadProgress: {},\n      successfullUploaded: false\n    };\n    _this.onFilesAdded = _this.onFilesAdded.bind(_assertThisInitialized(_this));\n    _this.uploadFiles = _this.uploadFiles.bind(_assertThisInitialized(_this));\n    _this.sendRequest = _this.sendRequest.bind(_assertThisInitialized(_this));\n    _this.renderActions = _this.renderActions.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Upload, [{\n    key: \"onFilesAdded\",\n    value: function onFilesAdded(files) {\n      this.setState(function (prevState) {\n        return {\n          files: prevState.files.concat(files)\n        };\n      });\n    }\n  }, {\n    key: \"renderProgress\",\n    value: function renderProgress(file) {\n      var uploadProgress = this.state.uploadProgress[file.name];\n\n      if (this.state.uploading || this.state.successfullUploaded) {\n        return React.createElement(\"div\", {\n          className: \"ProgressWrapper\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 33\n          },\n          __self: this\n        }, React.createElement(Progress, {\n          progress: uploadProgress ? uploadProgress.percentage : 0,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34\n          },\n          __self: this\n        }), React.createElement(\"img\", {\n          className: \"CheckIcon\",\n          alt: \"done\",\n          src: \"baseline-check_circle_outline-24px.svg\",\n          style: {\n            opacity: uploadProgress && uploadProgress.state === \"done\" ? 0.5 : 0\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        }));\n      }\n    }\n  }, {\n    key: \"renderActions\",\n    value: function renderActions() {\n      var _this2 = this;\n\n      if (this.state.successfullUploaded) {\n        return React.createElement(\"button\", {\n          onClick: function onClick() {\n            return _this2.setState({\n              files: [],\n              successfullUploaded: false\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52\n          },\n          __self: this\n        }, \"Clear\");\n      } else {\n        return React.createElement(\"button\", {\n          disabled: this.state.files.length < 0 || this.state.uploading,\n          onClick: this.uploadFiles,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62\n          },\n          __self: this\n        }, \"Upload\");\n      }\n    }\n  }, {\n    key: \"uploadFiles\",\n    value: function () {\n      var _uploadFiles = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var _this3 = this;\n\n        var promises;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.setState({\n                  uploadProgress: {},\n                  uploading: true\n                });\n                promises = [];\n                this.state.files.forEach(function (file) {\n                  promises.push(_this3.sendRequest(file));\n                });\n                _context.prev = 3;\n                _context.next = 6;\n                return Promise.all(promises);\n\n              case 6:\n                this.setState({\n                  successfullUploaded: true,\n                  uploading: false\n                });\n                _context.next = 12;\n                break;\n\n              case 9:\n                _context.prev = 9;\n                _context.t0 = _context[\"catch\"](3);\n                // Not Production ready! Do some error handling here instead...\n                this.setState({\n                  successfullUploaded: true,\n                  uploading: false\n                });\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[3, 9]]);\n      }));\n\n      function uploadFiles() {\n        return _uploadFiles.apply(this, arguments);\n      }\n\n      return uploadFiles;\n    }()\n  }, {\n    key: \"sendRequest\",\n    value: function sendRequest(file) {\n      var _this4 = this;\n\n      return new Promise(function (resolve, reject) {\n        var req = new XMLHttpRequest();\n        req.upload.addEventListener(\"progress\", function (event) {\n          if (event.lengthComputable) {\n            var copy = _objectSpread({}, _this4.state.uploadProgress);\n\n            copy[file.name] = {\n              state: \"pending\",\n              percentage: event.loaded / event.total * 100\n            };\n\n            _this4.setState({\n              uploadProgress: copy\n            });\n          }\n        });\n        req.upload.addEventListener(\"load\", function (event) {\n          var copy = _objectSpread({}, _this4.state.uploadProgress);\n\n          copy[file.name] = {\n            state: \"done\",\n            percentage: 100\n          };\n\n          _this4.setState({\n            uploadProgress: copy\n          });\n\n          resolve(req.response);\n        });\n        req.upload.addEventListener(\"error\", function (event) {\n          var copy = _objectSpread({}, _this4.state.uploadProgress);\n\n          copy[file.name] = {\n            state: \"error\",\n            percentage: 0\n          };\n\n          _this4.setState({\n            uploadProgress: copy\n          });\n\n          reject(req.response);\n        });\n        var formData = new FormData();\n        formData.append(\"file\", file, file.name);\n        req.open(\"POST\", \"http://localhost:8000/upload\");\n        req.send(formData);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n\n      return React.createElement(\"div\", {\n        className: \"Upload\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"Title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, \"Upload Files\"), React.createElement(\"div\", {\n        className: \"Content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, React.createElement(Dropzone, {\n        onFilesAdded: this.onFilesAdded,\n        disabled: this.state.uploading || this.state.successfullUploaded,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"Files\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, \"// Add this:\", this.state.files.map(function (file) {\n        return React.createElement(\"div\", {\n          key: file.name,\n          className: \"Row\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 140\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          className: \"Filename\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141\n          },\n          __self: this\n        }, file.name), _this5.renderProgress(file));\n      }))), React.createElement(\"div\", {\n        className: \"Actions\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, this.renderActions()));\n    }\n  }]);\n\n  return Upload;\n}(Component);\n\nexport default Upload;","map":{"version":3,"sources":["/Users/ryanmchenry/Documents/Northwestern/win2019/352/harmoni/client/src/Upload.js"],"names":["React","Component","Progress","Dropzone","Upload","props","state","files","uploading","uploadProgress","successfullUploaded","onFilesAdded","bind","uploadFiles","sendRequest","renderActions","setState","prevState","concat","file","name","percentage","opacity","length","promises","forEach","push","Promise","all","resolve","reject","req","XMLHttpRequest","upload","addEventListener","event","lengthComputable","copy","loaded","total","response","formData","FormData","append","open","send","map","renderProgress"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Upload.css\";\nimport Progress from './Progress'\nimport Dropzone from \"./Dropzone\";\n\n\nclass Upload extends Component {\n  constructor(props) {\n      super(props);\n      this.state = {\n        files: [],\n        uploading: false,\n        uploadProgress: {},\n        successfullUploaded: false\n      };\n\n      this.onFilesAdded = this.onFilesAdded.bind(this);\n      this.uploadFiles = this.uploadFiles.bind(this);\n      this.sendRequest = this.sendRequest.bind(this);\n      this.renderActions = this.renderActions.bind(this);\n    }\n\n  onFilesAdded(files) {\n    this.setState(prevState => ({\n      files: prevState.files.concat(files)\n    }));\n  }\n\n  renderProgress(file) {\n    const uploadProgress = this.state.uploadProgress[file.name];\n    if (this.state.uploading || this.state.successfullUploaded) {\n      return (\n        <div className=\"ProgressWrapper\">\n          <Progress progress={uploadProgress ? uploadProgress.percentage : 0} />\n          <img\n            className=\"CheckIcon\"\n            alt=\"done\"\n            src=\"baseline-check_circle_outline-24px.svg\"\n            style={{\n              opacity:\n                uploadProgress && uploadProgress.state === \"done\" ? 0.5 : 0\n            }}\n          />\n        </div>\n      );\n    }\n  }\n\n  renderActions() {\n    if (this.state.successfullUploaded) {\n      return (\n        <button\n          onClick={() =>\n            this.setState({ files: [], successfullUploaded: false })\n          }\n        >\n          Clear\n        </button>\n      );\n    } else {\n      return (\n        <button\n          disabled={this.state.files.length < 0 || this.state.uploading}\n          onClick={this.uploadFiles}\n        >\n          Upload\n        </button>\n      );\n    }\n  }\n\n  async uploadFiles() {\n    this.setState({ uploadProgress: {}, uploading: true });\n    const promises = [];\n    this.state.files.forEach(file => {\n      promises.push(this.sendRequest(file));\n    });\n    try {\n      await Promise.all(promises);\n\n      this.setState({ successfullUploaded: true, uploading: false });\n    } catch (e) {\n      // Not Production ready! Do some error handling here instead...\n      this.setState({ successfullUploaded: true, uploading: false });\n    }\n  }\n\n  sendRequest(file) {\n    return new Promise((resolve, reject) => {\n    const req = new XMLHttpRequest();\n\n    req.upload.addEventListener(\"progress\", event => {\n     if (event.lengthComputable) {\n      const copy = { ...this.state.uploadProgress };\n      copy[file.name] = {\n       state: \"pending\",\n       percentage: (event.loaded / event.total) * 100\n      };\n      this.setState({ uploadProgress: copy });\n     }\n    });\n\n    req.upload.addEventListener(\"load\", event => {\n     const copy = { ...this.state.uploadProgress };\n     copy[file.name] = { state: \"done\", percentage: 100 };\n     this.setState({ uploadProgress: copy });\n     resolve(req.response);\n    });\n\n    req.upload.addEventListener(\"error\", event => {\n     const copy = { ...this.state.uploadProgress };\n     copy[file.name] = { state: \"error\", percentage: 0 };\n     this.setState({ uploadProgress: copy });\n     reject(req.response);\n    });\n\n    const formData = new FormData();\n    formData.append(\"file\", file, file.name);\n\n    req.open(\"POST\", \"http://localhost:8000/upload\");\n    req.send(formData);\n   });\n  }\n\n  render() {\n    return (\n      <div className=\"Upload\">\n        <span className=\"Title\">Upload Files</span>\n        <div className=\"Content\">\n          <div>\n            <Dropzone\n              onFilesAdded={this.onFilesAdded}\n              disabled={this.state.uploading || this.state.successfullUploaded}\n            />\n          </div>\n          <div className=\"Files\">\n            // Add this:\n            {this.state.files.map(file => {\n              return (\n                <div key={file.name} className=\"Row\">\n                  <span className=\"Filename\">{file.name}</span>\n                  {this.renderProgress(file)}\n                </div>\n              );\n            })}\n          </div>\n        </div>\n        <div className=\"Actions\">{this.renderActions()}</div>\n      </div>\n    );\n  }\n}\n\nexport default Upload;\n"]},"metadata":{},"sourceType":"module"}