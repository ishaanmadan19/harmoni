{"ast":null,"code":"import _regeneratorRuntime from \"/Users/ryanmchenry/Documents/Northwestern/win2019/352/harmoni/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/ryanmchenry/Documents/Northwestern/win2019/352/harmoni/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/ryanmchenry/Documents/Northwestern/win2019/352/harmoni/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ryanmchenry/Documents/Northwestern/win2019/352/harmoni/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/ryanmchenry/Documents/Northwestern/win2019/352/harmoni/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/ryanmchenry/Documents/Northwestern/win2019/352/harmoni/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/ryanmchenry/Documents/Northwestern/win2019/352/harmoni/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/ryanmchenry/Documents/Northwestern/win2019/352/harmoni/client/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Upload from './upload/Upload';\nimport Nav from './Nav';\nimport Loading from './Loading';\nimport Tone from 'tone';\nimport SoundGrid from './SoundGrid';\nimport PlayToggleButton from './PlayToggleButton';\nvar synth = new Tone.PluckSynth().toMaster();\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    Tone.Transport.schedule(_this.triggerSynth, 0);\n    Tone.Transport.schedule(_this.triggerSynth, '0:2');\n    Tone.Transport.schedule(_this.triggerSynth, '0:2:2.5');\n    Tone.Transport.loopEnd = '1m';\n    Tone.Transport.loop = true; // Tone.Transport.start('+0.0');\n\n    _this.state = {\n      upload: false,\n      loading: false,\n      complete: false,\n      playing: false\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"closeUpload\",\n    value: function closeUpload(closebutton) {\n      if (closebutton === true) {\n        this.setState({\n          upload: false\n        });\n      } else {\n        this.setState({\n          upload: false,\n          loading: true\n        });\n      }\n    }\n  }, {\n    key: \"renderUploadBox\",\n    value: function renderUploadBox() {\n      var _this2 = this;\n\n      if (this.state.upload) {\n        return React.createElement(\"div\", {\n          style: {\n            position: 'absolute',\n            zIndex: 999,\n            height: '100vh',\n            width: '100vw',\n            top: '20vh',\n            margin: 'auto'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"Card\",\n          style: {\n            margin: 'auto'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43\n          },\n          __self: this\n        }, React.createElement(Upload, {\n          closeUpload: function closeUpload(e) {\n            return _this2.closeUpload(e);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44\n          },\n          __self: this\n        })));\n      }\n    }\n  }, {\n    key: \"waitForComplete\",\n    value: function waitForComplete() {\n      var _this3 = this;\n\n      window.setTimeout(function () {\n        _this3.setState({\n          complete: true,\n          loading: false\n        });\n      }, 2000);\n    }\n  }, {\n    key: \"renderTone\",\n    value: function () {\n      var _renderTone = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var midi, name;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return Midi.fromUrl(\"path/to/midi.mid\");\n\n              case 2:\n                midi = _context.sent;\n                //the file name decoded from the first track\n                name = midi.name; //get the tracks\n\n                midi.tracks.forEach(function (track) {\n                  //tracks have notes and controlChanges\n                  //notes are an array\n                  var notes = track.notes;\n                  notes.forEach(function (note) {//note.midi, note.time, note.duration, note.name\n                  }); //the control changes are an object\n                  //the keys are the CC number\n\n                  track.controlChanges[64]; //they are also aliased to the CC number's common name (if it has one)\n\n                  track.controlChanges.sustain.forEach(function (cc) {// cc.ticks, cc.value, cc.time\n                  }); //the track also has a channel and instrument\n                  //track.instrument.name\n                });\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function renderTone() {\n        return _renderTone.apply(this, arguments);\n      }\n\n      return renderTone;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      if (!this.state.loading && !this.state.complete) {\n        return React.createElement(\"div\", {\n          className: \"App\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87\n          },\n          __self: this\n        }, React.createElement(\"header\", {\n          className: \"App-header\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88\n          },\n          __self: this\n        }, React.createElement(Nav, {\n          current: \"home\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89\n          },\n          __self: this\n        }), React.createElement(\"img\", {\n          src: \"/wave.gif\",\n          className: \"App-logo\",\n          alt: \"logo\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"title\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          className: \"titleBlue\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        }, \"<\"), \"\\xA0harmoni\\xA0\", React.createElement(\"span\", {\n          className: \"titleBlue\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n          },\n          __self: this\n        }, \" />\")), React.createElement(\"div\", {\n          className: \"cardContainer\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"card\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"cardHeader\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        }, \"YOU GIVE US:\"), React.createElement(\"div\", {\n          className: \"cardBody\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100\n          },\n          __self: this\n        }, \"Input MIDI file\", React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          },\n          __self: this\n        }), \"Monophonic Melody\", React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          },\n          __self: this\n        }), \"Basic Metadata\")), React.createElement(\"div\", {\n          className: \"card\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"cardHeader\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108\n          },\n          __self: this\n        }, \"WE GIVE YOU:\"), React.createElement(\"div\", {\n          className: \"cardBody\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        }, \"Output MIDI file\", React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110\n          },\n          __self: this\n        }), \"Harmonized Accompaniment\", React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        }), \"Chord Progression\")), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115\n          },\n          __self: this\n        }), React.createElement(\"button\", {\n          className: \"buttonPrimary\",\n          onClick: function onClick() {\n            return _this4.setState({\n              upload: true\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116\n          },\n          __self: this\n        }, \"HARMONIZE\"))), this.renderUploadBox());\n      }\n\n      if (this.state.loading) {\n        this.waitForComplete();\n        return React.createElement(\"div\", {\n          className: \"App\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129\n          },\n          __self: this\n        }, React.createElement(\"header\", {\n          className: \"App-header\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130\n          },\n          __self: this\n        }, React.createElement(Nav, {\n          current: \"home\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131\n          },\n          __self: this\n        }), React.createElement(\"img\", {\n          src: \"/wave.gif\",\n          className: \"App-logo\",\n          alt: \"logo\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"cardContainer\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134\n          },\n          __self: this\n        }, React.createElement(Loading, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135\n          },\n          __self: this\n        }))));\n      }\n\n      if (this.state.complete) {\n        return React.createElement(\"div\", {\n          className: \"App\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 145\n          },\n          __self: this\n        }, React.createElement(\"header\", {\n          className: \"App-header\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146\n          },\n          __self: this\n        }, React.createElement(Nav, {\n          current: \"home\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 147\n          },\n          __self: this\n        }), React.createElement(\"img\", {\n          src: \"/wave.gif\",\n          className: \"App-logo\",\n          alt: \"logo\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 148\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"title\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 149\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          className: \"titleBlue\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150\n          },\n          __self: this\n        }, \"<\"), \"\\xA0complete\\xA0\", React.createElement(\"span\", {\n          className: \"titleBlue\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152\n          },\n          __self: this\n        }, \" />\")), React.createElement(\"div\", {\n          className: \"cardContainer\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155\n          },\n          __self: this\n        }, React.createElement(\"a\", {\n          href: \"http://localhost:8000/download\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          className: \"buttonPrimary\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157\n          },\n          __self: this\n        }, \"DOWNLOAD MIDI FILES\"), this.renderTone()))));\n      }\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/ryanmchenry/Documents/Northwestern/win2019/352/harmoni/client/src/App.js"],"names":["React","Component","Upload","Nav","Loading","Tone","SoundGrid","PlayToggleButton","synth","PluckSynth","toMaster","App","props","Transport","schedule","triggerSynth","loopEnd","loop","state","upload","loading","complete","playing","closebutton","setState","position","zIndex","height","width","top","margin","e","closeUpload","window","setTimeout","Midi","fromUrl","midi","name","tracks","forEach","track","notes","note","controlChanges","sustain","cc","renderUploadBox","waitForComplete","renderTone"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Upload from './upload/Upload';\nimport Nav from './Nav'\nimport Loading from './Loading'\nimport Tone from 'tone';\nimport SoundGrid from './SoundGrid';\nimport PlayToggleButton from './PlayToggleButton';\n\nvar synth = new Tone.PluckSynth().toMaster()\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    Tone.Transport.schedule(this.triggerSynth, 0);\n    Tone.Transport.schedule(this.triggerSynth, '0:2');\n    Tone.Transport.schedule(this.triggerSynth, '0:2:2.5');\n    Tone.Transport.loopEnd = '1m';\n    Tone.Transport.loop = true;\n    // Tone.Transport.start('+0.0');\n    this.state = {\n      upload:false,\n      loading:false,\n      complete:false,\n      playing:false\n    }\n  }\n\n  closeUpload(closebutton){\n    if (closebutton === true){\n      this.setState({upload:false})\n    }\n    else{\n      this.setState({upload:false, loading:true})\n    }\n  }\n\n  renderUploadBox(){\n    if (this.state.upload){\n      return(\n        <div style={{position:'absolute', zIndex:999, height: '100vh', width: '100vw', top:'20vh',margin:'auto'}}>\n          <div className='Card' style={{margin:'auto'}}>\n            <Upload closeUpload={(e)=>this.closeUpload(e)}/>\n          </div>\n        </div>\n      )\n    }\n  }\n\n  waitForComplete(){\n    window.setTimeout(()=>{\n      this.setState({complete:true,loading:false})\n    },2000)\n  }\n\n  async renderTone(){\n      const midi = await Midi.fromUrl(\"path/to/midi.mid\")\n      //the file name decoded from the first track\n      const name = midi.name\n      //get the tracks\n      midi.tracks.forEach(track => {\n        //tracks have notes and controlChanges\n\n        //notes are an array\n        const notes = track.notes\n        notes.forEach(note => {\n          //note.midi, note.time, note.duration, note.name\n        })\n\n        //the control changes are an object\n        //the keys are the CC number\n        track.controlChanges[64]\n        //they are also aliased to the CC number's common name (if it has one)\n        track.controlChanges.sustain.forEach(cc => {\n          // cc.ticks, cc.value, cc.time\n      })\n\n      //the track also has a channel and instrument\n      //track.instrument.name\n    })\n  }\n\n  render() {\n    if (!this.state.loading && !this.state.complete){\n      return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <Nav current='home'/>\n            <img src='/wave.gif' className=\"App-logo\" alt=\"logo\" />\n            <div className='title'>\n              <span className='titleBlue'>&lt;</span>\n              &nbsp;harmoni&nbsp;\n              <span className='titleBlue'> &#47;&gt;</span>\n            </div>\n\n            <div className='cardContainer'>\n              <div className='card'>\n                <div className='cardHeader'>YOU GIVE US:</div>\n                <div className='cardBody'>\n                  Input MIDI file<br/>\n                  Monophonic Melody<br/>\n                  Basic Metadata\n                </div>\n              </div>\n\n              <div className='card'>\n                <div className='cardHeader'>WE GIVE YOU:</div>\n                <div className='cardBody'>\n                  Output MIDI file<br/>\n                  Harmonized Accompaniment<br/>\n                  Chord Progression\n                </div>\n              </div>\n              <br/>\n              <button className='buttonPrimary' onClick={()=>this.setState({upload:true})}>HARMONIZE</button>\n            </div>\n\n          </header>\n          {this.renderUploadBox()}\n        </div>\n      );\n    }\n\n\n    if (this.state.loading){\n      this.waitForComplete()\n      return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <Nav current='home'/>\n            <img src='/wave.gif' className=\"App-logo\" alt=\"logo\" />\n\n            <div className='cardContainer'>\n              <Loading/>\n            </div>\n\n          </header>\n        </div>\n      );\n    }\n\n    if (this.state.complete){\n      return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <Nav current='home'/>\n            <img src='/wave.gif' className=\"App-logo\" alt=\"logo\" />\n            <div className='title'>\n              <span className='titleBlue'>&lt;</span>\n              &nbsp;complete&nbsp;\n              <span className='titleBlue'> &#47;&gt;</span>\n            </div>\n\n            <div className='cardContainer'>\n              <a href='http://localhost:8000/download'>\n                <button className='buttonPrimary'>DOWNLOAD MIDI FILES</button>\n                {this.renderTone()}\n              </a>\n            </div>\n\n          </header>\n        </div>\n      );\n    }\n\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}